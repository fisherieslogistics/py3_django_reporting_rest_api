# https://github.com/svanoort/pyresttest
# act as a user who goes on a fishing trip
# test that can submit a trip event
# test that can submit 3 fishing events
# repeat for another vessel
# test that can retrieve the data and that ts all there
# test some things that should fail actually fail..


---
- config:
    - testset: "Test Fishing Trip"
    - generators:
      - 'today': {type: 'dategen', hours: 0}
      - 'tomorrow': {type: 'dategen', hours: 24}
      - 'geopoint': {type: 'geojsonpoint', lat: -45.879068, lon: 170.511046}


- test:
    name: "Login"
    method: POST
    headers: {"Content-Type": "application/json"}
    url: "/api-token-auth/"
    body: '{"username": "resttester", "password": "testrester"}'
    extract_binds:
        - 'jwt': {'jsonpath_mini': 'token'}

- template: &get
    headers: {template: {"Authorization": "JWT $jwt", "Content-Type": "application/json"}}
    method: GET

- template: &post
    headers: {template: {"Authorization": "JWT $jwt", "Content-Type": "application/json"}}
    method: POST

- test:
    name: "Create vessel"
    <<: *post
    body: '{"name": "USS Trump", "registration": 99}'
    url: "/vessels/"
    extract_binds:
        - 'vessel_id': {'jsonpath_mini': 'id'}

- test:
    name: "Create port"
    <<: *post
    body: '{"name": "Trumps Wall", "location": "POINT(171.1535947 -44.3788682)"}'
    url: "/ports/"
    extract_binds:
        - 'port_id': {'jsonpath_mini': 'id'}

- test:
    name: "Create a Trip"
    generator_binds: { t1: today,t2: tomorrow,t3: tomorrow, home: geopoint}
    <<: *post
    body: { template:
      '{
      "RAId": "de61697f-748f-498b-90a8-8afafa7e3b4f",
      "personInCharge": "$timeone",
      "ETA": "$t2",
      "startTime": "$t1",
      "endTime": "$t3",
      "startLocation": $home,
      "endLocation": $home,
      "unloadPort": "http://localhost:8000/ports/$port_id/",
      "vessel": "http://localhost:8000/vessels/$vessel_id/"
      }'
    }
    url: "/trips/"
    extract_binds:
        - 'tripRAId': {'jsonpath_mini': 'RAId'}


- test:
    name: "Create a Fishing Event"
    generator_binds: { t1: today, t2: today, start: geopoint, end: geopoint, t3: today }
    <<: *post
    body: { template:
       '{
        "fishCatches": [{ "weight": 100, "code": "COC" }],
        "numberInTrip": 1,
        "targetSpecies": "COC",
        "datetimeAtStart": "$t1",
        "datetimeAtEnd": "$t2",
        "committed": true,
        "locationAtStart": $start,
        "locationAtEnd": $end,
        "lineString": "{}",
        "eventSpecificDetails": {"fishingMethod": "H","numberOfPeople": 1},
        "mitigationDeviceCodes": "[]",
        "vesselNumber": 123213123,
        "vesselId": "$vessel_id",
        "isVesselUsed": true,
        "completedDateTime": "$t3",
        "tripRAId": "$tripRAId",
        "RAId": "80293305-f619-4c38-8b21-09369ae6a4e3"
       }'
    }
    url: "/fishingEventWithCatches/"
    extract_binds:
        - 'fishing_event_id': {'jsonpath_mini': 'id'}


- test:
    name: "Create another Fishing Event"
    generator_binds: { t1: today, t2: today, start: geopoint, end: geopoint, t3: today }
    <<: *post
    body: { template:
       '{
        "fishCatches": [{ "weight": 120, "code": "COC" }],
        "numberInTrip": 2,
        "targetSpecies": "COC",
        "datetimeAtStart": "$t1",
        "datetimeAtEnd": "$t2",
        "committed": true,
        "locationAtStart": $start,
        "locationAtEnd": $end,
        "lineString": "{}",
        "eventSpecificDetails": {"fishingMethod": "H","numberOfPeople": 1},
        "mitigationDeviceCodes": "[]",
        "vesselNumber": 123213123,
        "vesselId": "$vessel_id",
        "isVesselUsed": true,
        "completedDateTime": "$t3",
        "tripRAId": "$tripRAId",
        "RAId": "80293305-f619-4c38-8b21-09369ae6a4e3"
       }'
    }
    url: "/fishingEventWithCatches/"
    extract_binds:
        - 'fishing_event_id': {'jsonpath_mini': 'id'}
